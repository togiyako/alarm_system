import os
import sys
import logging
import base64
import json
from datetime import datetime, timedelta
from flask import Flask, request, jsonify
from Crypto.Cipher import ChaCha20
import requests

# üîß –ù–µ–≥–∞–π–Ω–∏–π –≤–∏–≤—ñ–¥ –ª–æ–≥—ñ–≤ —É stdout (–≤–∞–∂–ª–∏–≤–æ –¥–ª—è Render)
sys.stdout.reconfigure(line_buffering=True)

# üîß –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO, format='[%(asctime)s] %(message)s')

app = Flask(__name__)

# üîê –ó—á–∏—Ç—É–≤–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ –∑ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ (–∑–∞–º—ñ—Å—Ç—å –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞)
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
TELEGRAM_CHAT_IDS = ['962377746', '622093459']  # –ó–∞–º—ñ–Ω–∏—Ç–∏ –ø—Ä–∏ –ø–æ—Ç—Ä–µ–±—ñ

# üîë 32-–±–∞–π—Ç–æ–≤–∏–π –∫–ª—é—á ChaCha20 (—Ç–æ–π —Å–∞–º–∏–π, —â–æ —ñ –Ω–∞ ESP32)
KEY = bytes(range(0x00, 0x20))  # [0x00 –¥–æ 0x1F –≤–∫–ª—é—á–Ω–æ]


def send_telegram_alert(message: str):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    for chat_id in TELEGRAM_CHAT_IDS:
        payload = {"chat_id": chat_id, "text": message}
        response = requests.post(url, json=payload)
        if response.status_code != 200:
            logging.error(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤ Telegram (chat_id: {chat_id}): {response.text}")
        else:
            logging.info(f"‚úÖ –ù–∞–¥—ñ—Å–ª–∞–Ω–æ –≤ Telegram (chat_id: {chat_id})")


def decrypt_payload(nonce_b64: str, data_b64: str) -> str:
    nonce = base64.b64decode(nonce_b64)
    ciphertext = base64.b64decode(data_b64)
    cipher = ChaCha20.new(key=KEY, nonce=nonce)
    plaintext = cipher.decrypt(ciphertext)
    return plaintext.decode('utf-8')


@app.route('/notify', methods=['POST'])
def notify():
    payload = request.get_json(silent=True)
    logging.info(f"üì¶ –û—Ç—Ä–∏–º–∞–Ω–æ payload: {payload}")

    if not payload or 'nonce' not in payload or 'data' not in payload:
        return jsonify({"status": "invalid request"}), 400

    try:
        decrypted = decrypt_payload(payload['nonce'], payload['data'])
        logging.info(f"üîì –î–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ JSON: {decrypted}")
        data = json.loads(decrypted)
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–µ—à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è –∞–±–æ –ø–∞—Ä—Å–∏–Ω–≥—É: {e}")
        return jsonify({"status": "decryption error"}), 400

    ts = (datetime.now() + timedelta(hours=3)).strftime('%Y-%m-%d %H:%M:%S')
    if data.get('motion'):
        msg = f"üö® –†—É—Ö –≤–∏—è–≤–ª–µ–Ω–æ!\nüïí {ts}"
    elif data.get('gas'):
        msg = f"üî• –í–∏—è–≤–ª–µ–Ω–æ –≤–æ–≥–æ–Ω—å!\nüïí {ts}"
    else:
        return jsonify({"status": "unknown payload"}), 400

    logging.info(msg)
    send_telegram_alert(msg)
    return jsonify({"status": "alert sent"}), 200


if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5001, threaded=True)
